# -*- coding: utf-8 -*-
"""text_rank.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14Z5B6ARMcYgg14OiR2JcWdT--1n7h0wD
"""

!pip install datasets
!pip install contractions
!pip install rouge

## for data
import datasets  #(1.13.3)
import pandas as pd  #(0.25.1)
import numpy  #(1.16.4)
## for plotting
import matplotlib.pyplot as plt  #(3.1.2)
import seaborn as sns  #(0.9.0)
## for preprocessing
import re
import nltk  #(3.4.5)
import contractions  #(0.0.18)
## for textrank
import gensim  #(3.8.1)
## for evaluation
import rouge  #(1.0.0)
import difflib

import pandas as pd
file1 = open('test.source', 'r')
file2 = open('test.target', 'r')
lines1 = file1.readlines()

df1 = pd.DataFrame (lines1, columns = ['report'])
df1['id'] = range(1, len(df1) + 1)

lines2 = file2.readlines()

df2 = pd.DataFrame (lines2, columns = ['y'])
df2['id'] = range(1, len(df2) + 1)

df = pd.DataFrame (lines2, columns = ['y'])
df['text'] = df1['report']
df = df.dropna()
print(len(df))
df.head()

dtf_test = df#.iloc[800:]
dtf_test.count

'''
Summarizes corpus with TextRank.
:parameter    
    :param corpus: str or list - dtf["text"]    
    :param ratio: length of the summary (ex. 20% of the text)
:return    
    list of summaries
'''
def textrank(corpus, ratio=0.2):    
    if type(corpus) is str:        
       corpus = [corpus]    
    lst_summaries = [gensim.summarization.summarize(txt,  
                     ratio=ratio) for txt in corpus]    
    return lst_summaries

## Apply the function to corpus
predicted = textrank(corpus=dtf_test["text"], ratio=0.15)

#dtf_test["text"][800]

#dtf_test["y"][800]

predicted[0]

df = pd.DataFrame (predicted, columns = ['text'])

df.to_csv('textrank-out-0.10.csv')

import numpy as np
import pandas as pd
import nltk
import re

with open('b-out.txt') as f:
    lines1 = f.readlines()

newlines1 = []
for s in lines1:
  s = s.replace('<s>','')
  s = s.replace('</s>','')
  s = s.replace('<pad>','')
  s = s.replace('\n','')
  newlines1.append(s)

df1 = pd.DataFrame (newlines1, columns = ['text2'])
df1['index'] = range(1, len(df1) + 1)

df2 = pd.read_csv ('textrank-out-0.10.csv')
df2['index'] = range(1, len(df2) + 1)

df3 = pd.merge(df1,df2,on="index")
df3

df3["Final"] = df3['text'].astype(str) +"-"+ df3["text2"]

df3.to_csv('combined-out-0.10.csv')

dfo = pd.read_csv ('combined-out-0.10.csv')

import numpy as np
'''
Calculate ROUGE score.
:parameter    
    :param y_test: string or list    
    :param predicted: string or list
'''
def evaluate_summary(y_test, predicted):    
   rouge_score = rouge.Rouge()    
   scores = rouge_score.get_scores(y_test, predicted, avg=True)       
   score_1 = round(scores['rouge-1']['f'], 2)    
   score_2 = round(scores['rouge-2']['f'], 2)    
   score_L = round(scores['rouge-l']['f'], 2)    
   print("rouge1:", score_1, "| rouge2:", score_2, "| rougeL:", score_2, "--> avg rouge:", round(np.mean([score_1,score_2,score_L]), 2))

## Apply the function to predicted
evaluate_summary(dtf_test["y"][0], dfo["Final"][0])
#evaluate_summary(dtf_test["y"][0], predicted[0])
